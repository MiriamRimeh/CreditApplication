@page
@model CreditApplication.Pages.Credits.CreateModel

@{
    ViewData["Title"] = "Create Credit";
}

<h1>Създаване на кредит</h1>

<h4>Данни за кредит</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Search by EGN -->
            <div class="form-group">
                <label for="searchEGN">Търсене по ЕГН на клиента:</label>
                <input type="text" id="searchEGN" class="form-control" placeholder="Въведете ЕГН..." />
            </div>

            <!-- Select existing client by filtered list -->
            <div class="form-group">
                <span class="text-danger">*</span>
                <label asp-for="Credit.ClientID" class="control-label">Изберете клиент:</label>
                <select asp-for="Credit.ClientID" id="ClientSelect" class="form-control" asp-items="Model.ClientList">
                    <option value="">-- Изберете --</option>
                </select>
                <span asp-validation-for="Credit.ClientID" class="text-danger"></span>
            </div>

            <div class="form-group">
                <span class="text-danger">*</span>
                <label asp-for="Credit.CreditAmount" class="control-label">Желана сума на кредит:</label>
                <input asp-for="Credit.CreditAmount" class="form-control" />
                <span asp-validation-for="Credit.CreditAmount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Credit.CreditBeginDate" class="control-label">Желана дата за първа вноска:</label>
                <input asp-for="Credit.CreditBeginDate" class="form-control" />
                <span asp-validation-for="Credit.CreditBeginDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Credit.CreditPeriod" class="control-label">Период на кредита (месеци):</label>
                <input asp-for="Credit.CreditPeriod" class="form-control" />
                <span asp-validation-for="Credit.CreditPeriod" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Credit.TotalCreditAmount" class="control-label">Общо дължимо в края на периода:</label>
                <input asp-for="Credit.TotalCreditAmount" class="form-control" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Credit.MonthlyInstallment" class="control-label">Месечна вноска:</label>
                <input asp-for="Credit.MonthlyInstallment" class="form-control" readonly />
            </div>

            <div class="form-group">
                <input type="submit" value="Създай" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Filter client options by EGN
        document.getElementById('searchEGN').addEventListener('input', function() {
            var filter = this.value.toLowerCase();
            var options = document.getElementById('ClientSelect').options;
            for (var i = 0; i < options.length; i++) {
                var text = options[i].text.toLowerCase();
                options[i].style.display = text.includes(filter) ? '' : 'none';
            }
        });

        // Recalculate totals and installment
        (() => {
            const amountInput         = document.getElementById('Credit_CreditAmount');
            const periodInput         = document.getElementById('Credit_CreditPeriod');
            const totalAmountInput    = document.getElementById('Credit_TotalCreditAmount');
            const monthlyPaymentInput = document.getElementById('Credit_MonthlyInstallment');
            const interestRate        = 0.40;

            function recalc() {
                const amount = parseFloat(amountInput.value) || 0;
                const months = parseInt(periodInput.value)   || 0;

                if (amount >= 300 && amount <= 5000 && months >= 5 && months <= 24) {
                    const monthlyRate = interestRate / 12;
                    const monthly = (amount * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -months));
                    const total   = monthly * months;
                    totalAmountInput.value    = total.toFixed(2);
                    monthlyPaymentInput.value = monthly.toFixed(2);
                } else {
                    totalAmountInput.value    = '';
                    monthlyPaymentInput.value = '';
                }
            }

            amountInput.addEventListener('input', recalc);
            periodInput.addEventListener('input', recalc);
        })();
    </script>
}