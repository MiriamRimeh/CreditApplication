@page "/component"
@using FastCreditApp.Data
@using FastCreditApp.Data.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Collections.Generic
@inject FastCreditDbContext DbContext

<PageTitle>Component</PageTitle>
<h3>Component</h3>
<p>Component content goes here.</p>

<EditForm Model="@newClient" OnValidSubmit="SubmitForm" FormName="ClientForm">
    <div class="form-group mb-3">
        <label for="firstName">Име*</label>
        <InputText id="firstName" class="form-control" @bind-Value="newClient.FirstName" />
        <ValidationMessage For="@(() => newClient.FirstName)" />
    </div>

    <div class="form-group mb-3">
        <label for="middleName">Презиме (по желание)</label>
        <InputText id="middleName" class="form-control" @bind-Value="newClient.MiddleName" />
        <ValidationMessage For="@(() => newClient.MiddleName)" />
    </div>

    <div class="form-group mb-3">
        <label for="lastName">Фамилия*</label>
        <InputText id="lastName" class="form-control" @bind-Value="newClient.LastName" />
        <ValidationMessage For="@(() => newClient.LastName)" />
    </div>

    <div class="form-group mb-3">
        <label for="egn">ЕГН* (точно 10 цифри)</label>
        <InputText id="egn" class="form-control" @bind-Value="newClient.EGN" maxlength="10" />
        <ValidationMessage For="@(() => newClient.EGN)" />
    </div>

    <div class="form-group mb-3">
        <label for="email">Email*</label>
        <InputText id="email" class="form-control" @bind-Value="newClient.Email" type="email" />
        <ValidationMessage For="@(() => newClient.Email)" />
    </div>

    <div class="form-group mb-3">
        <label for="phoneNumber">Телефон</label>
        <InputText id="phoneNumber" class="form-control" @bind-Value="newClient.PhoneNumber" />
        <ValidationMessage For="@(() => newClient.PhoneNumber)" />
    </div>

    <div class="form-group mb-3">
        <label for="idCardNumber">Номер на лична карта*</label>
        <InputText id="idCardNumber" class="form-control" @bind-Value="newClient.IDCardNumber" />
        <ValidationMessage For="@(() => newClient.IDCardNumber)" />
    </div>

    <div class="form-group mb-3">
        <label for="IDIssueDate">Издадена на дата*</label>
        <InputDate id="IDIssueDate" class="form-control" @bind-Value="newClient.IDIssueDate" />
        <ValidationMessage For="@(() => newClient.IDIssueDate)" />
    </div>

    <div class="form-group mb-3">
        <label for="IDValidityDate">Валидна до дата*</label>
        <InputDate id="IDValidityDate" class="form-control" @bind-Value="newClient.IDValidityDate" />
        <ValidationMessage For="@(() => newClient.IDValidityDate)" />
    </div>

    <div class="form-group mb-3">
        <label for="idIssuer">Издал МВР (лична карта)*</label>
        <InputText id="idIssuer" class="form-control" @bind-Value="newClient.IDIssuer" />
        <ValidationMessage For="@(() => newClient.IDIssuer)" />
    </div>

    <div class="d-flex gap-3">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>

@*     @if (saved)
    {
        <div class="alert alert-success mt-3" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> Заявката е изпратена успешно!
        </div>
    }

    @if (error)
    {
        <div class="alert alert-danger mt-3" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> Възникна грешка – @errorMessage
        </div>
    } *@

    <ValidationSummary />
</EditForm>

@code {
    private Client newClient = new Client();
    private bool saved = false;
    private bool error = false;
    private string errorMessage = "моля проверете данните или опитайте по-късно.";
    private bool debugValidation = false;

    // Using DateTime for InputDate which doesn't work directly with DateOnly
    private DateTime idIssueDateTime = DateTime.Today;
    private DateTime idValidityDateTime = DateTime.Today.AddYears(10);

    protected override void OnInitialized()
    {
        InitializeClient();
    }

    private void InitializeClient()
    {
        // Set default values
        newClient.CreatedOn = DateTime.Now;
        newClient.ModifiedOn = DateTime.Now;

        // Convert DateTime to DateOnly for the model
        newClient.IDIssueDate = DateOnly.FromDateTime(idIssueDateTime);
        newClient.IDValidityDate = DateOnly.FromDateTime(idValidityDateTime);
    }


    private async Task SubmitForm(EditContext editContext)
    {
        // saved = false;
        // error = false;
        // errorMessage = "моля проверете данните или опитайте по-късно.";

        try
        {
            // Update DateOnly fields from DateTime inputs
            newClient.IDIssueDate = DateOnly.FromDateTime(idIssueDateTime);
            newClient.IDValidityDate = DateOnly.FromDateTime(idValidityDateTime);

            // Ensure timestamps are set
            newClient.CreatedOn = DateTime.Now;
            newClient.ModifiedOn = DateTime.Now;

            // Add the client to the context
            DbContext.Clients.Add(newClient);

            // Save changes to the database
            await DbContext.SaveChangesAsync();

            // Reset the form with a new client object
            newClient = new Client();
            idIssueDateTime = DateTime.Today;
            idValidityDateTime = DateTime.Today.AddYears(10);
            InitializeClient();

            saved = true;
        }
        catch (DbUpdateException dbEx)
        {
            Console.WriteLine($"Database error saving client: {dbEx.Message}");
            error = true;
            errorMessage = "Грешка при запис в базата данни. " + dbEx.InnerException?.Message;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving client: {ex.Message}");
            error = true;
            errorMessage = ex.Message;
        }
    }
}